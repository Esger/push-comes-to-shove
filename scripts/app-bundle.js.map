{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","resources/value-converters/id-value-converter.js","resources/value-converters/tile-value-converter.js","resources/services/drag-service.js","resources/services/my-settings-service.js","resources/services/score-service.js","resources/elements/board/board.js","resources/elements/game/game.js","resources/elements/help/help.js","resources/elements/tile/tile.js"],"names":["App","debug","testing","configure","Promise","config","longStackTraces","environment","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","idValueConverter","toView","id","params","y","x","tileValueConverter","value","board","DragService","EventAggregator","eventAggregator","_eventAggregator","_dragStartPos","undefined","_dragEndPos","_lastZindex","_dragged","getClientPos","event","clientX","touches","clientY","left","top","startDrag","_element","target","_dragPreviousPos","element","publish","doDrag","clientPos","dx","dy","Math","abs","stopDrag","MySettingsService","_isMobile","sessionStorage","getItem","_settingsName","_version","_settings","_defaultSettings","_loadSettings","saveSettings","settings","localStorage","setItem","JSON","stringify","getSettings","_getDefaultSettings","version","resetSettings","parse","ScoreService","ea","score","subscribe","resetHighScore","response","getScore","saveScore","level","BoardCustomElement","Element","mySettingsService","maxColors","win","_settingService","_highestValue","_score","rowTileCount","center","floor","showBoard","_newValues","_gameEnd","attached","boardSize","Number","getComputedStyle","document","documentElement","getPropertyValue","_tileSize","offset","distance","_newTile","tile","color","_newBoard","_moves","row","push","setTimeout","moves","gameEnd","_saveSettings","_addListeners","detached","_removeListeners","_moveListener","_currentTile","move","_moveIfValid","restartListener","_restartGame","dispose","directions","targetTile","animate","tilesBehind","_findTilesBehind","_restoreTilePositions","_shiftColors","time","_animateTiles","unshift","_checkGameEnd","tiles","oppositeDirections","i","length","vector","last","current","previous","className","newTile","setRandomColor","_maxColors","ddt","dt","t","step","some","v","max","map","pos","j","_movesHorPossible","equals","forEach","nextTile","_movesVerPossible","nextRow","next","_allEqual","firstColor","notAllEqual","_winGame","_endGame","random","GameCustomElement","dragService","scoreService","title","_scoreService","highScore","_highSubscription","_moveSubscription","_winSubscription","levelClass","_restartSubscription","restart","HelpCustomElement","helpVisible","showHelp","hideHelp","TileCustomElement","_setRandomColor","ceil","_allowedDirections","locked","animated","correct","dragged","visible","burn","onfire","_allowed","_animateListener","_burnListener","_correctMoveListener","_doDragListener","_lockListener","_onfireListener","_resetMoveListener","_startDragListener","_stopDragListener","_unlockListener","_animate","_setNextColor","console","log","incorrect","_startDragHandler","_doDragHandler","_stopDragHandler","_startPosition","_delta","_oneDelta","_directionAllowed","direction","delta","allowed","_drag","absDelta","_directions","sign","_underTreshold","constrainedDistance","bindable"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","export class idValueConverter {\n    toView(id, params) {\n        id = 'tile_' + params.y + '-' + params.x;\n        return id;\n    }\n}","export class tileValueConverter {\n    toView(value, params) {\n        value = params.board[params.y][params.x];\n        return value;\n    }\n}","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class DragService {\n\n    constructor(eventAggregator) {\n        this._eventAggregator = eventAggregator;\n        this._dragStartPos = undefined;\n        this._dragEndPos = undefined;\n        this._lastZindex = 1;\n        this._dragged = false;\n    }\n\n    getClientPos(event) {\n        const clientX = (event.touches) ? event.touches[0].clientX : event.clientX;\n        const clientY = (event.touches) ? event.touches[0].clientY : event.clientY;\n        return {\n            left: clientX,\n            top: clientY\n        };\n    }\n\n    startDrag(event) {\n        if (!this._element) {\n            this._element = event.target;\n            this._dragStartPos = this.getClientPos(event);\n            this._dragPreviousPos = this._dragStartPos;\n\n            const element = {\n                element: this._element,\n                left: this._dragStartPos.left,\n                top: this._dragStartPos.top\n            };\n\n            this._eventAggregator.publish('startDrag', element);\n        }\n        return false;\n    }\n\n    doDrag(event) {\n        if (this._element) {\n            const clientPos = this.getClientPos(event);\n            const dx = clientPos.left - this._dragPreviousPos.left;\n            const dy = clientPos.top - this._dragPreviousPos.top;\n            if (Math.abs(dx) + Math.abs(dy) > 0) {\n                this._dragPreviousPos = clientPos;\n    \n                const element = {\n                    element: this._element,\n                    dx: dx,\n                    dy: dy\n                };\n    \n                this._eventAggregator.publish('doDrag', element);\n            }\n        }\n    }\n\n    stopDrag(event) {\n        if (this._element) {\n            const element = {\n                element: this._element,\n            };\n\n            this._eventAggregator.publish('stopDrag', element);\n            this._element = undefined;\n            this._dragPreviousPos = undefined;\n        }\n    }\n\n}\n","export class MySettingsService {\n    _isMobile = sessionStorage.getItem('isMobile') == 'true';\n    _settingsName = 'one-color';\n    _version = 'v1.0'; // increase when settings object changes\n    _settings = undefined;\n    _defaultSettings = undefined;\n\n    constructor() {\n        this._loadSettings();\n    }\n\n    saveSettings(settings) {\n        localStorage.setItem(this._settingsName, JSON.stringify(settings));\n        this._settings = settings;\n    }\n\n    getSettings() {\n        return this._settings || this._getDefaultSettings();\n    }\n\n    _getDefaultSettings() {\n        this._defaultSettings = this._defaultSettings || {\n            version: this._version || 1.0\n        };\n        return this._defaultSettings;\n    }\n\n    resetSettings() {\n        this._settings = this._getDefaultSettings();\n        this.saveSettings(this._settings);\n    }\n\n    _loadSettings() {\n        const settings = JSON.parse(localStorage.getItem(this._settingsName));\n        if (!settings || settings.version !== this._version) this.resetSettings();\n        else this._settings = settings;\n    }\n}\n","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class ScoreService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.score = {};\n        this.ea.subscribe('resetHighScore', response => {\n            this.resetHighScore(response);\n        });\n    }\n\n    getScore() {\n        const score = localStorage.getItem('one-color-scores');\n        if (score) {\n            this.score = JSON.parse(score);\n            return this.score;\n        } else {\n            return 1;\n        }\n    }\n\n    saveScore(score) {\n        if (score) {\n            this.score = score;\n            localStorage.setItem('one-color-scores', JSON.stringify(score));\n        }\n        this.ea.publish('updateStatus');\n    }\n\n    resetHighScore(level) {\n        this.score[level] = 0;\n        this.saveScore(this.score);\n        this.ea.publish('updateStatus');\n    }\n\n}\n","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { MySettingsService } from 'resources/services/my-settings-service';\n\n@inject(Element, EventAggregator, MySettingsService)\nexport class BoardCustomElement {\n    maxColors = 2;\n    win = false;\n\n    settings = {\n        version: 'v1.1', // increase if board structure changes\n    }\n\n    constructor(element, eventAggregator, mySettingsService) {\n        this._element = element;\n        this._eventAggregator = eventAggregator;\n        this._settingService = mySettingsService;\n        this._highestValue = 1;\n        this._score = 0;\n        this.rowTileCount = 5; // tiles in one row\n        this.center = Math.floor(this.rowTileCount / 2);\n        this.board = [];\n        this.showBoard = true;\n        this._newValues = [1];\n        this._gameEnd = false;\n    }\n\n    attached() {\n        this.boardSize = Number(getComputedStyle(document.documentElement).getPropertyValue('--boardSize'));\n        this._tileSize = Number(getComputedStyle(document.documentElement).getPropertyValue('--tileSize'));\n        this.center = Math.floor(this.boardSize / 2);\n        this.offset = this.boardSize * 2 / (this.boardSize + 1);\n        this.distance = this._tileSize + this.offset;\n\n    }\n\n    _newTile(x, y) {\n        const tile = {\n            x: x,\n            y: y,\n            id: 'tile_' + y + '-' + x,\n            color: 'transparent',\n            value: 1\n        };\n        return tile;\n    }\n\n    _newBoard() {\n        this._highestValue = 1;\n        this._newValues = [1];\n        this._score = 0;\n        this._moves = 0;\n        this._gameEnd = false;\n        this.showBoard = false;\n        this.board = [];\n\n        for (let y = 0; y < this.rowTileCount; y++) {\n            let row = [];\n            for (let x = 0; x < this.rowTileCount; x++) {\n                row.push(this._newTile(x, y));\n            }\n            this.board.push(row);\n        }\n        setTimeout(() => {\n            this.showBoard = true;\n        }, 200);\n\n        this._eventAggregator.publish('reset-score');\n        this._eventAggregator.publish('moves', { moves: this._moves });\n    }\n\n    attached() {\n        const settings = this._settingService.getSettings();\n        if (!settings.board || settings.gameEnd) {\n            this._newBoard();\n            this._saveSettings();\n        } else {\n            this.board = settings.board;\n            this._moves = settings.moves || 0;\n            // this._highestValue = this.board[2][2].value;\n            // this._eventAggregator.publish('high', this._highestValue);\n            this._eventAggregator.publish('moves', { moves: this._moves });\n        }\n        this._addListeners();\n    }\n\n    detached() {\n        this._removeListeners();\n    }\n\n    _saveSettings() {\n        this.settings.board = this.board;\n        this.settings.gameEnd = this._gameEnd;\n        this.settings.moves = this._moves;\n        this._settingService.saveSettings(this.settings);\n    }\n\n    _addListeners() {\n        this._moveListener = this._eventAggregator.subscribe('request-move', move => {\n            this._currentTile = this.board[move.tile.y][move.tile.x];\n            this._moveIfValid(move); // x,y,directions[y,x]\n        });\n        this.restartListener = this._eventAggregator.subscribe('restart', () => {\n            this.maxColors = 2;\n            this._restartGame();\n        });\n    }\n\n    _removeListeners() {\n        this.restartListener.dispose();\n    }\n\n    _restartGame() {\n        this._newBoard();\n        this._saveSettings();\n    }\n\n    _moveIfValid(move) {\n        let target = [move.tile.y + move.directions[0], move.tile.x + move.directions[1]]; // coords\n        let targetTile = this.board[target[0]][target[1]];\n        if (move.tile.color == targetTile.color) {\n            // animate the dragged tile to the target\n            move.animate = true;\n            this._eventAggregator.publish('move', move);\n            this._moves++;\n            this._eventAggregator.publish('moves', { moves: this._moves });\n            let tilesBehind = this._findTilesBehind(move);\n            // wait for animation to target\n            setTimeout(() => {\n                this._eventAggregator.publish('correct', targetTile);\n                this._restoreTilePositions(tilesBehind, move.directions);\n                this._shiftColors(tilesBehind, move.directions);\n\n                // animate the intruding tiles on the board\n                let time = this._animateTiles(tilesBehind, move.directions);\n                setTimeout(() => {\n                    tilesBehind.unshift(targetTile);\n                    this._eventAggregator.publish('unlockTiles');\n                    this._saveSettings();\n                    this._checkGameEnd();\n                }, time);\n            }, 100);\n        } else {\n            this._eventAggregator.publish('reset', move);\n            this._eventAggregator.publish('unlockTiles');\n        }\n    }\n\n    _restoreTilePositions(tiles, directions) {\n\n        let oppositeDirections = [-directions[0], -directions[1]];\n\n        // shift the tiles 1 place in opposite direction as moved tile \n        for (let i = 0; i < tiles.length; i++) {\n            let vector = {\n                tile: tiles[i],\n                directions: oppositeDirections,\n                animate: false\n            };\n            this._eventAggregator.publish('move', vector);\n        }\n    }\n\n    _shiftColors(tiles, directions) {\n        // shift values of tiles one place in same direction as moved tile\n        let last = tiles.length - 1;\n        for (let i = 0; i < last; i++) {\n            const current = this.board[tiles[i].y][tiles[i].x];\n            const previous = this.board[tiles[i].y - directions[0]][tiles[i].x - directions[1]];\n            current.color = previous.color;\n            current.className = previous.className;\n        }\n\n        // fill the new outermost tile\n        const newTile = this.board[tiles[last].y][tiles[last].x]\n        newTile.setRandomColor(newTile._maxColors);\n    }\n\n    _animateTiles(tiles, directions) {\n        const ddt = 100;\n        let dt = 100;\n        if (tiles.length) {\n            // the first [0] tile is the dragged one\n            for (let i = 0; i < tiles.length; i++) {\n                const tile = tiles[i];\n                let vector = {\n                    tile: tile,\n                    directions: [0, 0],\n                    animate: true\n                };\n                setTimeout(() => {\n                    this._eventAggregator.publish('move', vector);\n                }, dt);\n                dt += ddt;\n            }\n        }\n        return dt;\n    }\n\n    // find the tiles behind the moved tile from the empty place to the wall\n    _findTilesBehind(move) {\n        let tilesBehind = [];\n        let t = [move.tile.y, move.tile.x];\n        // if one of the directions > 0 then step = -1 (opposite direction)\n        let step = move.directions.some(v => { return v > 0; }) ? -1 : 1;\n        let max = (step > 0) ? this.rowTileCount : -1;\n        let start = (move.directions[0] == 0) ? t[1] : t[0];\n        for (let i = start; i != max; i += step) {\n            tilesBehind.push(this.board[t[0]][t[1]]);\n            t = t.map((pos, j) => { return pos - move.directions[j]; });\n        }\n        return tilesBehind;\n    }\n\n    _movesHorPossible() {\n        let equals = false;\n        this.board.forEach(row => {\n            row.forEach((tile, x) => {\n                const nextTile = row[x + 1];\n                if (nextTile) {\n                    equals = equals || nextTile.color == tile.color;\n                }\n            });\n        });\n        return equals;\n    }\n\n    _movesVerPossible() {\n        let equals = false;\n        this.board[0].forEach((tile, x) => {\n            this.board.forEach((row, y) => {\n                const current = row[x].color;\n                const nextRow = this.board[y + 1];\n                if (nextRow) {\n                    const next = nextRow[x].color;\n                    equals = equals || next == current;\n                }\n            });\n        });\n        return equals;\n    }\n\n    _allEqual() {\n        const firstColor = this.board[0][0].color;\n        const notAllEqual = this.board.some(row => row.some(tile => tile.color != firstColor));\n        return !notAllEqual;\n    }\n\n    _checkGameEnd() {\n        // wait for animation of intruding tiles\n        if (this._allEqual()) {\n            this._winGame();\n        } else if (!this._movesHorPossible() && !this._movesVerPossible()) {\n            this.settings.gameEnd = true;\n            this._saveSettings();\n            this._endGame();\n        }\n    }\n\n    _winGame() {\n        this.win = true;\n        setTimeout(_ => {\n            this.win = false;\n            if (this.maxColors < 4)\n                this.maxColors++;\n            setTimeout(_ => {\n                this._restartGame();\n                this._eventAggregator.publish('win', this.maxColors);\n            }, 500);\n        }, 500);\n    }\n\n    _endGame() {\n        this._gameEnd = true;\n        this._eventAggregator.publish('burn');\n        this.board.forEach(row => {\n            row.forEach(tile => {\n                setTimeout(_ => {\n                    this._eventAggregator.publish('onfire', tile);\n                }, Math.random() * 1500);\n            });\n        });\n    }\n\n}\n","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { DragService } from 'resources/services/drag-service';\nimport { ScoreService } from 'resources/services/score-service';\n\n@inject(DragService, ScoreService, EventAggregator)\nexport class GameCustomElement {\n    title = 'uniColor';\n    level = 1;\n\n    constructor(dragService, scoreService, eventAggregator) {\n        this.dragService = dragService;\n        this._eventAggregator = eventAggregator;\n        this._scoreService = scoreService;\n    }\n\n    attached() {\n        this.highScore = this._scoreService.getScore();\n        this._highSubscription = this._eventAggregator.subscribe('high', value => {\n            if (value > this.highScore) {\n                this.highScore = value;\n                this._scoreService.saveScore(value);\n            }\n            this.title = value + '+' + value;\n        });\n        this._moveSubscription = this._eventAggregator.subscribe('moves', moves => {\n            this.moves = moves.moves;\n        })\n        this._winSubscription = this._eventAggregator.subscribe('win', level => {\n            this.level = level - 1;\n            this.levelClass = 'level--' + (level - 1);\n        });\n        this._restartSubscription = this._eventAggregator.subscribe('restart', () => {\n            this.level = 1;\n            this.levelClass = 'level--0';\n        });\n    }\n\n    restart() {\n        this._eventAggregator.publish('restart');\n    }\n\n    detached() {\n        this._highSubscription.dispose();\n        this._moveSubscription.dispose();\n        this._winSubscription.dispose();\n        this._restartSubscription.dispose();\n    }\n\n}\n","export class HelpCustomElement {\n\n    constructor() {\n        this.helpVisible = false;\n    }\n\n    showHelp() {\n        this.helpVisible = true;\n    }\n\n    hideHelp() {\n        this.helpVisible = false;\n    }\n\n}","import { inject, bindable } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { DragService } from 'resources/services/drag-service';\n\n@inject(Element, DragService, EventAggregator)\nexport class TileCustomElement {\n    @bindable tile;\n    @bindable rowTileCount;\n    @bindable maxColors;\n    @bindable win;\n\n    constructor(element, dragService, eventAggregator) {\n        this.dragService = dragService;\n        this._eventAggregator = eventAggregator;\n        this._element = element;\n        this._allowedDirections = [];\n        this.locked = false;\n        this.animated = false;\n        this.correct = false;\n        this.dragged = false;\n        this.visible = true;\n        this.burn = false;\n        this.onfire = false;\n        this.dx = 0;\n        this.dy = 0;\n    }\n\n    attached() {\n        this._setRandomColor();\n        this.tile.maxColors = this.maxColors;\n        this.tile.setRandomColor = this._setRandomColor;\n        this._allowedDirections = [this._allowed(this.tile.y), this._allowed(this.tile.x)];\n        this._addListeners();\n    }\n\n    detached() {\n        this._animateListener.dispose();\n        this._burnListener.dispose();\n        this._correctMoveListener.dispose();\n        this._doDragListener.dispose();\n        this._lockListener.dispose();\n        this._onfireListener.dispose();\n        this._resetMoveListener.dispose();\n        this._startDragListener.dispose();\n        this._stopDragListener.dispose();\n        this._unlockListener.dispose();\n    }\n\n    _addListeners() {\n        this._burnListener = this._eventAggregator.subscribe('burn', () => {\n            this.burn = true;\n        });\n\n        this._onfireListener = this._eventAggregator.subscribe('onfire', tile => {\n            if (tile.id == this.tile.id) {\n                this.onfire = true;\n            }\n        });\n\n        this._animateListener = this._eventAggregator.subscribe('move', move => {\n            if (move.tile.id == this.tile.id) {\n                this._animate(move.directions, move.animate);\n            }\n        });\n\n        this._correctMoveListener = this._eventAggregator.subscribe('correct', tile => {\n            if (tile.id == this.tile.id) {\n                this.correct = true;\n                setTimeout(() => {\n                    this.correct = false;\n                    this._setNextColor();\n                });\n            }\n        });\n\n        this._lockListener = this._eventAggregator.subscribe('lockTiles', tile => {\n            if (tile.element.id != this.tile.id) {\n                this.locked = true;\n            }\n        });\n\n        this._unlockListener = this._eventAggregator.subscribe('unlockTiles', () => {\n            this.locked = false;\n        });\n\n        this._resetMoveListener = this._eventAggregator.subscribe('reset', move => {\n            if (move.tile.id == this.tile.id) {\n                console.log('incorrect move');\n                this.animated = true;\n                this.visible = true;\n                this.incorrect = true;\n                this.dx = 0;\n                this.dy = 0;\n                setTimeout(() => {\n                    this.incorrect = false;\n                }, 400);\n            }\n        });\n\n        this._startDragListener = this._eventAggregator.subscribe('startDrag', tile => {\n            if (tile.element.id == this.tile.id) {\n                this._startDragHandler(tile);\n            }\n        });\n\n        this._doDragListener = this._eventAggregator.subscribe('doDrag', tile => {\n            if (tile.element.id == this.tile.id) {\n                this._doDragHandler(tile);\n            }\n        });\n\n        this._stopDragListener = this._eventAggregator.subscribe('stopDrag', tile => {\n            if (tile.element.id == this.tile.id) {\n                this._stopDragHandler();\n            }\n        });\n\n    }\n\n    _allowed(value) {\n        // value is tile x or y\n        // returns -1, 0 or 1\n        switch (value) {\n            case 0: return 1; // only increment allowed\n            case this.rowTileCount - 1: return -1; // only decrement allowed\n            default: return 0; // both allowed\n        }\n    }\n\n    _animate(directions, animate = true) {\n        this.animated = animate;\n        setTimeout(() => {\n            this.dy = directions[0];\n            this.dx = directions[1];\n        });\n    }\n\n    _startDragHandler(tile) {\n        this.dragged = true;\n        this._startPosition = {\n            left: tile.left,\n            top: tile.top\n        };\n        this._delta = [0, 0];\n        this._oneDelta = [0, 0];\n    }\n\n    _directionAllowed(direction, delta) {\n        const allowed = this._allowedDirections[direction] != -delta; // 0 and delta is allowed\n        return allowed;\n    }\n\n    _drag(directions) {\n        this.dragged = true;\n        this.animated = false;\n        // for elastic effect\n        this.dy = (directions[0] / 2) + 'px';\n        this.dx = (directions[1] / 2) + 'px';\n    }\n\n    _doDragHandler(tile) {\n        if (this.dragged) {\n            this._delta[1] += tile.dx; // px\n            this._delta[0] += tile.dy;  // px\n            // absolute delta values in px to determine the largest of the two\n            const absDelta = [Math.abs(this._delta[0]), Math.abs(this._delta[1])];\n\n            // only the largest delta is set in px; the other is zeroed to constrain move\n            const direction = (absDelta[1] > absDelta[0]) ? 1 : 0; // x\n            const delta = this._delta[direction]; // px\n            this._oneDelta = [0, 0];    // px\n            this._oneDelta[direction] = delta;\n\n            this._directions = [Math.sign(this._oneDelta[0]), Math.sign(this._oneDelta[1])];\n            if (this._directionAllowed(direction, this._directions[direction])) {\n                this._eventAggregator.publish('lockTiles', tile);\n                if (this._underTreshold(this._oneDelta)) {\n                    this._drag(this._oneDelta);\n                } else {\n                    // oneDelta mapped to -1 / 0 / 1\n                    this.dragged = false;\n                    let vector = {\n                        tile: this.tile,\n                        directions: this._directions\n                    };\n                    this._eventAggregator.publish('request-move', vector);\n                }\n            } else {\n                this.dragged = false;\n            }\n\n        }\n    }\n\n    _stopDragHandler() {\n        if (this.dragged) {\n            this.dragged = false;\n            if (this._underTreshold(this._oneDelta)) {\n                this._animate([0, 0]);\n                this._eventAggregator.publish('unlockTiles');\n            }\n        }\n    }\n\n    _underTreshold(constrainedDistance) {\n        let value = Math.max(Math.abs(constrainedDistance[0]), Math.abs(constrainedDistance[1]));\n        return value < 40;\n    }\n\n    _setRandomColor = (maxColors = 2) => {\n        this.tile.color = Math.ceil(Math.random() * maxColors);\n    }\n\n    _setNextColor() {\n        this.tile.color = (this.tile.color == this.maxColors) ? 1 : this.tile.color + 1;\n    }\n\n}\n"],"sourceRoot":"../src"}